#!/usr/bin/env python3

import sys
import os
from os import path
import io
import shutil
import argparse
import glob
import subprocess
from subprocess import PIPE

def usage():
    print("""python_clean [prefix]

    Clean the current package and associated package path of everything to do with a particular package (prefix)

    If the prefix is not given, assume the current directory name is the prefix.

    """)

def run_command(**kwargs):
    """
    Run a command using Popen.
    Args:
        **kwargs: cmd=[command, params]

    Returns:
        Success: tuple of (out, err)
        Failure: None
    """
    if 'cmd' in kwargs:
        cmd = kwargs['cmd']
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        results = p.communicate()
        out = results[0].decode('UTF8').strip()
        err = results[1].decode('UTF8').strip()
        return out,err
    else:
        return None


def clean_it(argv):

    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--prefix", help="Specify package prefix")

    args = parser.parse_args()

    # Scope variable
    package_prefix = None

    cwd = os.getcwd()

    if not path.exists('setup.py'):
        print("Please switch to root of project")
        sys.exit(1)

    if args.prefix:
        package_prefix = args.prefix
    else:
        cwd_basename = path.basename(cwd)
        package_prefix = cwd_basename

    # Check current directory and one level up
    dirs_to_remove = ['build', 'dist', '../build', '../dist']
    dirs_to_remove.extend(glob.glob("*egg-info"))
    # Limit to *egg_info that belongs to this package
    more_egg_info_dirs = list(filter(lambda x: package_prefix in x, 
                                     glob.glob("../*egg-info")))
    
    dirs_to_remove.extend(more_egg_info_dirs)
    # print("python_clean (debug) dirs_to_remove {0}".format(dirs_to_remove))
    for subdir in dirs_to_remove :
        full_path = path.join(cwd,subdir)
        if path.isdir(full_path):
            shutil.rmtree(full_path)

    cache_files = glob.glob("../*pycache*", recursive=True)
    # print("python_clean (debug) cache_files {0}".format(cache_files))
    for cache_file in cache_files:
        os.remove(cache_file)

    python_clean_path_bin, err = run_command(cmd=["which", "python_clean_path"])
    cmd = "{0} --prefix {1}".format(python_clean_path_bin, package_prefix)
    cmd_parts = cmd.split()
    # print("python_clean (debug) python_clean_path {0}".format(cmd_parts))
    # Disabled clean_path 2018/10/17
    # out, error = run_command(cmd=cmd_parts)
    # print(out)


if __name__ == "__main__":
    clean_it(sys.argv[1:])
    sys.exit(0)
