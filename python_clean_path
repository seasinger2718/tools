#!/usr/bin/env python3

import sys
import os
from os import path
import shutil
import argparse
import glob

def clean_easy_install_pth(pth_file_name, match_string):
    pth_file_name_backup = "{0}.bak".format(pth_file_name)
    shutil.copy(pth_file_name, pth_file_name_backup)
    with open(pth_file_name,'w') as ofile:
        with open(pth_file_name_backup,'r') as ifile:
            line = ifile.readline()
            if match_string not in line:
                ofile.write(line)


def usage():
    print("""python_clean_path -p prefix -v verbose
    
    Clean the python package path of everything to do with a particular package (prefix)
    
    If the prefix is not given, assume the current directory name is the prefix.
    
    """)


def clean_it(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument("-p","--prefix", help="Specify package prefix")
    parser.add_argument("-v","--verbose", help="Set verbosity level", action="store_true")

    args = parser.parse_args()

    # Scope variable
    package_prefix = None

    if args.prefix:
        package_prefix = args.prefix
    else:
        cwd = os.getcwd()
        cwd_basename = path.basename(cwd)
        package_prefix = cwd_basename

    if args.verbose:
        verbose = True
        #print("verbose mode enabled")
    else:
        verbose = False
        #print("verbose mode disabled")

    # Deal with easy-install.pth files first
    # Do this here for efficiency
    ps = sys.path
    for p in ps:
        if path.exists(p):
            easyinstall_path = "{0}/easy-install.pth".format(p)

            if verbose:
                print("easy_install_path {0}".format(easyinstall_path))

            if os.path.isfile(easyinstall_path):
                clean_file = False

                with open(easyinstall_path, 'r') as file_in:
                    contents = file_in.read()

                    if verbose:
                        print("easy_install_path contents {0}".format(contents))

                    if package_prefix in contents:
                        print("easy_install_path cleaning")                        
                        clean_file = True

                # Do this in two passes to ensure easy-install.pth file
                # is closed before being re-opened
                if clean_file:
                    print("Cleaning path file {0}".format(easyinstall_path))
                    clean_easy_install_pth(easyinstall_path, package_prefix)

    # Reload system path because it's just been messed with
    ps = sys.path
    matching_paths = []
    for p in ps:
        if path.exists(p):
            # Skip any path that contains 'setup.py' at the top level. This
            # Do this here for efficiency
            setup_py_path = path.join(p,"setup.py")
            if path.exists(setup_py_path):
                continue

            match_pattern = "{0}/{1}*".format(p,package_prefix)
            matches = glob.glob(match_pattern, recursive=True)
            for match in matches:
                if match not in matching_paths:
                    matching_paths.append(match)

    for matching_path in matching_paths:
        setup_py_path = path.join(p, "setup.py")
        remove = False

        if 'egg-link' in matching_path:
            remove = True
        elif path.exists(setup_py_path):
            print("Skipping {0}".format(matching_path))
        else:
            remove = True

        if remove:
            print("Deleting {0}".format(matching_path))
            if path.isdir(matching_path):
                shutil.rmtree(matching_path)
            else:
                os.remove(matching_path)
        

if __name__ == "__main__":
    clean_it(sys.argv[1:])
    sys.exit(0)
