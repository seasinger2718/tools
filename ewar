#!/bin/bash
exec scala "$0" "$@"
!#

/*
Copyright (c) 2010-2012 Tracy Flynn - All rights reserved
May be distributed under the same terms as Ruby
*/

// Scala imports
import scala.sys.process._
import scala.collection.JavaConversions.propertiesAsScalaMap
import scala.util.matching.Regex

// Java imports
import System._

object SystemUtils {
	val programName = {
		val filenames = new RuntimeException("").getStackTrace.map { t => t.getFileName }
		val scala = filenames.indexOf("NativeMethodAccessorImpl.java")
 
		if (scala == -1)
			"<console>"
		else
			filenames(scala - 1)
	}
	
	def isProgramPresent(program : String): Boolean = {
	    val whichString = "which -s %s".format(program)
	    whichString.! == 0   
	}
	
}


object StringUtils {

    def replaceTemplates(text: String, templates: Map[String, String]): String = {
      var updatedText = text
      
      templates.foreach {
        case (key, value) => {
            //println("template value %s : %s".format(key,value))
            val replaceRegex = new Regex(java.util.regex.Pattern.quote(key))
            updatedText = replaceRegex.replaceAllIn(updatedText,value) 
        }
      }
      updatedText
    }

}

object RegexUtils {


}

class ExecutableInfo {
    
    var executableType: Symbol = _
    var executableName: String = _
    var runInstructions: String = _
    
    override def toString = {
        val builder = new StringBuilder
        builder.append("executableType: " + executableType)
        builder.append(" executableName: " + executableName) 
        builder.toString
    }
} 

object ProjectTemplateBuilder {
    
    def run(): ProjectTemplateBuilder = {
        val projectTemplateBuilder = new ProjectTemplateBuilder(new ExecutableInfo)
        projectTemplateBuilder.run
    }

    def run(executableInfo : ExecutableInfo): ProjectTemplateBuilder = {
        val projectTemplateBuilder = new ProjectTemplateBuilder(executableInfo)
        projectTemplateBuilder.run
    }

    
}

class ProjectTemplateBuilder(executableInfo : ExecutableInfo) {
    
    private val startingDir = System.getProperty("user.dir")
    
    def run(): ProjectTemplateBuilder = {
        println("Running: " + this.toString + " " + executableInfo.toString)
        this
    }
    
}


/*****
Edit defaults starting here
******/

val DefaultGroupId = "net.verymuchme"
val DefaultArtifactVersion = "1.0"

//val javaProperties = propertiesAsScalaMap(System.getProperties())
//javaEnvironmentProperties.keySet.toList.foreach(k => println(k))

val SourceCodeAuthor = 
    if (SystemUtils.isProgramPresent("git")) "git config --get user.name".!!
    else System.getenv("LOGNAME")

val PomDependencyJunitVersion = "4.8.1"
val PomDependencySlf4jJclOverSlf4jVersion = "1.5.8"
val PomDependencySlf4jSlf4jApiVersion = "1.5.8"
val PomDependencySlf4jSlf4jLog4j12Version = "1.5.8"
val PomDependencyLog4jVersion = "1.2.14"
val PomDependencyJmockJunit4Version = "2.5.1"
val PomDependencyJavaxServletApiVersion = "2.5"

//val formatTemplate = """some %s"""
// println(formatTemplate.format(PomDependencyLog4jVersion))

val DefaultSourceCodeCopyrightMessageTemplate = """/* Copyright 2009-2012 Tracy Flynn
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"""

val DescriptionTextTemplate = """Overview
--------

[EXECUTABLE_NAME] is a script that will create a skeleton for a single [PROJECT_DESCRIPTION].

It uses the same concepts as a Maven archetype - groupID, artifactID and so on.

In addition to the effective results of 'mvn archetype:generate' for a suitable archetype,
the script will add:

- Other artifacts suitable to the type of project
- Sample code sufficient to create a runnable application

To run
------

./[EXECUTABLE_NAME]

and respond to the prompts or accept the defaults offered.

Options:

-q         quiet mode - Disable this message
--runit    Automically run the artifact after creating it

Testing the result
-----------------

Example is for groupId 'com.example', artifact 'sampleproduct' and package  'com.example.sampleproduct'

[RUN_INSTRUCTIONS]
"""

val JarRunInstructions = """Then issue the commands:

cd [artifact_dir]
./bin/runit

where 'artifact_dir' is the directory containing the artifact you've just created.
"""


/*****
End editing defaults - Do not edit below this point
******/

val programName = SystemUtils.programName

val JarRunTypeRegex = new Regex(""".*ejar.*""")
val WarRunTypeRegex = new Regex(""".*ewar.*""")
val SpringRunTypeRegex = new Regex(""".*espringwar.*""")

val executableInfo : ExecutableInfo  = programName match {
    case JarRunTypeRegex() => {
        val localExecutableInfo = new ExecutableInfo
        localExecutableInfo.executableType = 'jar
        localExecutableInfo.executableName = "ejar"
        //localExecutableInfo.runInstructionsTemplate = JarRunInstructions
        localExecutableInfo
    }
    case _ => {
        println("Default - no run type found")
        val localExecutableInfo = new ExecutableInfo
        localExecutableInfo
    }
}


val projectTemplateBuilder = ProjectTemplateBuilder.run(executableInfo)
//projectTemplateBuilder.run()

// Fill in variables and templates in order

//println("executableType " + executableType + " executableName " + executableName)

// var templateVariables : Map[String, String] = Map(
//     ("[EXECUTABLE_NAME]" -> executableName)
// )

// val runInstructions = StringUtils.replaceTemplates(runInstructionsTemplate,templateVariables)

// println(runInstructions)

// templateVariables += ("[RUN_INSTRUCTIONS]" -> runInstructions)

// val descriptionText = StringUtils.replaceTemplates(DescriptionTextTemplate,templateVariables)

// println(descriptionText)

